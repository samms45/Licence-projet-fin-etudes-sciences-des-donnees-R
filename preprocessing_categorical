# Pour résoudre ces problèmes, nous envisageons d'utiliser deux approches principales :
  
# 1. Agrégation Manuelle :
# 2. Classification Ascendante Hiérarchique (CAH) :



## Voici les étapes de gestion des variables qualitatives :


########################
##### Etape 1 ##########
########################

## Creation d'une fonction qui permet d'identifier des problèmes potentiels,
## tels que des modalités rares, un grand nombre de modalités ou des différences de fréquence significatives.


generate_frequency_table <- function(data, qualitative_variable) {
  
  # table() pour compter les occurrences des modalités
  table_result <- table(data[[qualitative_variable]])
  
  # prop.table() pour obtenir les fréquences relatives
  freq_relatives <- round(prop.table(table_result), 3)
  
  # Créer un dataframe avec les effectifs et les fréquences relatives
  result_dataframe <- data.frame(
    Modalite = names(table_result),
    Effectif = as.vector(table_result),
    Frequence = as.vector(freq_relatives)
  )
  
  # Trier le dataframe par fréquences relatives décroissantes
  result_dataframe <- result_dataframe[order(result_dataframe$Frequence, decreasing = TRUE), ]
  
  return(result_dataframe)
}


########################
##### Etape 2 ##########
########################

## Fonction de Nettoyage de Variable Qualitative 
## Si la fonction `generate_frequency_table` révèle des problèmes, nous utilisons la fonction `nettoyer_variable`pour nettoyer la variable. 
## Cela comprend la suppression de niveaux indésirables et des valeurs manquantes.


nettoyer_variable <- function(data, variable, niveaux_a_supprimer = NULL) {
  # Supprimer les niveaux indésirables
  if (!is.null(niveaux_a_supprimer)) {
    data[[variable]] <- droplevels(data[[variable]], exclude = niveaux_a_supprimer)
  }
  
  # Supprimer les lignes avec des valeurs manquantes dans la variable
  data <- data[!is.na(data[[variable]]), ]
  
  return(data)
}


########################
##### Etape 3 ##########
########################

#########################################################
# Pour une agrégation automatique nous allons faire un CAH.
##########################################################

# Fonction pour calculer la matrice de dissimilarité basée sur l'indice de Dice

calculate_dice_similarity_matrix <- function(data, variable_name) {
  # Étape 1 : Sélectionne la variable catégorielle à partir des données
  variable <- data[[variable_name]]
  
  # Étape 2 : Transforme la variable en encodage one-hot
  encoded_data <- model.matrix(~ variable - 1, data = data)
  
  # Étape 3 : Calcule la matrice de dissimilarité (indice de Dice)
  # on crée une matrice vide de la même taille que les données encodées
  similarity_matrix <- matrix(0, ncol(encoded_data), ncol(encoded_data))
  
  # Nom des lignes et colonnes de la matrice avec les noms des variables
  rownames(similarity_matrix) <- colnames(similarity_matrix) <- colnames(encoded_data)
  
  # on parcour toutes les paires de variables encodées
  for (i in 1:(ncol(encoded_data) - 1)) {
    for (j in (i + 1):ncol(encoded_data)) {
      # Calculez l'indice de Dice entre les deux variables
      similarity_matrix[i, j] <- similarity_matrix[j, i] <-
        0.5 * sum((encoded_data[, i] - encoded_data[, j])^2)
    }
  }

  # Étape 4 : Transforme la matrice de similarité en matrice de distance
  distance_matrix <- as.dist(sqrt(similarity_matrix))  # Ajout de la parenthèse autour de sqrt
  
  # Étape 5 : Renvoie la matrice de distance
  return(distance_matrix)
}

#####################################
# Fonction choix du nombre de cluster
#######################################

#### Fonction pour afficher le graphique d'inertie

afficher_graphique_inertie <- function(data, variable) {
  distance_matrix <- calculate_dice_similarity_matrix(data, variable)
  arbre.moda <- hclust(distance_matrix, method = "average")
  
  # Sous-graphique 1 : Inertie
  inertie <- sort(arbre.moda$height, decreasing = TRUE)
  plot(inertie[1:length(inertie)], type = "s", xlab = "Nombre de classes", ylab = "Inertie", main = "Inertie")
}


#### Fonction pour organiser les graphiques

organiser_graphiques <- function(data, variable) {
  distance_matrix <- calculate_dice_similarity_matrix(data, variable)
  matrice_sim <- as.matrix(distance_matrix)
  
  # le nombre de niveaux de la variable spécifiée
  k_max <- nlevels(data[[variable]]) - 1
  
  # Sous-graphique 2 : Méthode Silhouette
  optimal_clusters_silhouette <- fviz_nbclust(matrice_sim, FUNcluster = hcut, method = "silhouette", hc_method = "average",
                                              k.max = k_max)
  plot2 <- optimal_clusters_silhouette + labs(subtitle = "Silhouette method")
  
  # Sous-graphique 3 : Méthode Elbow
  optimal_clusters_elbow <- fviz_nbclust(matrice_sim, FUNcluster = hcut, method = "wss", hc_method = "average",
                                         k.max = k_max)
  plot3 <- optimal_clusters_elbow + geom_vline(xintercept = 4, linetype = 2) + labs(subtitle = "Elbow method")
  
  # Sous-graphique 4 : Méthode Gap Statistic
  optimal_clusters_gap_stat <- fviz_nbclust(matrice_sim, FUNcluster = hcut, method = "gap_stat", nboot = 600, 
                                            hc_method = "average", k.max = k_max)
  plot4 <- optimal_clusters_gap_stat + labs(subtitle = "Gap statistic method")
  
  # les sous-graphiques en une seule disposition
  grid.arrange(plot2, plot3, plot4, ncol = 1)
}


#######################
###  Validation interne
######################## 

generer_resultats_clustering <- function(data, variable, nbre_choix) {
  # Calcul la matrice de similarité
  distance_matrix <- calculate_dice_similarity_matrix(data, variable)
  
  # Créer une liste vide pour stocker les résultats
  result_list <- list()
  
  # Créer une deuxième liste vide pour stocker uniquement les stats avec des noms
  stats_list <- list()
  
  # Liste pour stocker les attributs de clustering
  cluster_list <- list()  
  
  
  for (ap in nbre_choix) {
    # Créer une partition en clusters de test
    arbre.moda <- hclust(distance_matrix, method = "average")
    clustering <- cutree(arbre.moda, k = ap)
    
    # les statistiques de validation de clustering
    stats <- cluster.stats(distance_matrix, clustering)
    
    # Créez une sous-liste avec des noms
    sub_list <- list(nbre_choix = ap, stats = stats, clustering = clustering)  # Inclure les attributs de clustering
    
    # Ajout la sous-liste aux listes respectives
    result_list[[length(result_list) + 1]] <- sub_list
    stats_list[[length(stats_list) + 1]] <- sub_list$stats
    cluster_list[[length(cluster_list) + 1]] <- sub_list$clustering
  }
  
  # Créez une matrice vide pour stocker les résultats
  elements <- c( "average.within", "dunn", "dunn2", "entropy")
  results_matrix <- matrix(nrow = length(elements), ncol = length(stats_list))
  
  # Définir les noms des lignes de la matrice
  rownames(results_matrix) <- elements
  
  # Définir les noms de colonnes en utilisant les valeurs de nbre_choix avec "cluster_"
  colnames(results_matrix) <- paste("cluster_", as.character(nbre_choix), sep = " ")
  
  for (j in 1:length(stats_list)) {
    stats <- stats_list[[j]]  # Obtenir les statistiques de la liste
    for (i in 1:length(elements)) {
      result <- stats[[elements[i]]]
      results_matrix[i, j] <- result
    }
  }
  
  return(list(result_list = result_list, stats_list = stats_list, cluster_list = cluster_list, results_matrix = results_matrix))
}



##################################################################################
################### Mettre en application pour chaques variables #################
################################################################################## 

#################################
### Pour la variable "lieu_region" : gestion mannuelle
###################################

frequency_table <- generate_frequency_table(data, "lieu_region")
print(frequency_table)

# Utilisation de la fonction pour nettoyer la variable taille_entrep
data <- nettoyer_variable(data, "lieu_region", niveaux_a_supprimer = " United Kingdom")

# Verification 
cat( "le nombre de region maintenant :", nlevels(data$lieu_region) )    # 3345 obs initial
cat( "le nombre de ligne maintenant :", nrow(data) )

# Changez les modalités 
levels(data$lieu_region)[levels(data$lieu_region) %in% c(" AZ", " TX")] <- "sud_Ouest"
levels(data$lieu_region)[levels(data$lieu_region) %in% c(" CA")]       <- "cote_Ouest"
levels(data$lieu_region)[levels(data$lieu_region) %in% c(" DE", " FL", " NJ"," NY", " PA")] <- "cote_est"
levels(data$lieu_region)[levels(data$lieu_region) %in% c(" IL", " OH")] <- "Sud_Ouest"

# Vérifiez les niveaux mis à jour
cat("On verifie les nouvelles modalites :")
cat(levels(data$lieu_region))

cat("dimension du data :", dim(data) )



###################################
### Pour la variable "taille_entrep" : gestion automatique
####################################

# Appel de la fonction 
frequency_table <- generate_frequency_table(data, "taille_entrep")
print(frequency_table)

# Utilisation de la fonction pour nettoyer la variable taille_entrep
data <- nettoyer_variable(data, "taille_entrep", niveaux_a_supprimer = "Unknown")

# Verification 
cat( "le nombre de taille_entrep maintenant :", nlevels(data$taille_entrep) )    # on passe de 8 modalité à 7 
cat( "le nombre de ligne maintenant :", nrow(data) )                             # 3341 obs apres lieu_region



# Utilisation de la première fonction pour afficher le graphique d'inertie
afficher_graphique_inertie(data, "taille_entrep")

# Utilisation de la deuxième fonction pour organiser les graphiques
organiser_graphiques(data, "taille_entrep")

# Utilisation de la fonction pour générer les résultats
nbre_choix <- c(2,4)
resultats <- generer_resultats_clustering(data, "taille_entrep", nbre_choix)

# Afficher la matrice finale
print(resultats$results_matrix)
print(resultats$cluster_list)


# Changez les modalités 
levels(data$taille_entrep)[levels(data$taille_entrep) %in% c("1 to 50 employees" , "51 to 200 employees")] <- "petite"
levels(data$taille_entrep)[levels(data$taille_entrep) %in% c("201 to 500 employees", "501 to 1000 employees" )] <- "moyenne"
levels(data$taille_entrep)[levels(data$taille_entrep) %in% c("1001 to 5000 employees", "5001 to 10000 employees")] <- "grande"
levels(data$taille_entrep)[levels(data$taille_entrep) %in% c("10000+ employees")] <- "tres_grande"

# Vérifiez les niveaux mis à jour
print(levels(data$taille_entrep))



####################################  
## Pour la variable "Type_propriete" : gestion automatique
####################################

frequency_table <- generate_frequency_table(data, "Type_propriete")
print(frequency_table)

# Utilisation de la première fonction pour afficher le graphique d'inertie
afficher_graphique_inertie(data, "Type_propriete")

# Utilisation de la deuxième fonction pour organiser les graphiques
organiser_graphiques(data, "Type_propriete")


# Utilisation de la fonction pour générer les résultats
nbre_choix <- c(2,3,4,10)
resultats <- generer_resultats_clustering(data, "Type_propriete", nbre_choix)

# Afficher la matrice finale
print(resultats$results_matrix)
print(resultats$cluster_list)


# Changez les modalités 
levels(data$Type_propriete)[levels(data$Type_propriete) %in% "Company - Private" ] <- "privee"
levels(data$Type_propriete)[levels(data$Type_propriete) %in% "Company - Public" ] <- "publique"

# restes des variables
levels(data$Type_propriete)[c(1, 4:14)] <- "autres"

# Vérifiez les niveaux mis à jour
print(levels(data$Type_propriete))



####################################
###Pour la variable "revenue_entrep" : gestion manuelle
###################################

frequency_table <- generate_frequency_table(data, "revenue_entrep")
print(frequency_table)

# Changez les modalités 
levels(data$revenue_entrep)[levels(data$revenue_entrep) %in% "Unknown / Non-Applicable"] <- "inconnue"
levels(data$revenue_entrep)[levels(data$revenue_entrep) %in% "$10+ billion (USD)"] <- "+10B"

levels(data$revenue_entrep)[c(8:11)] <- "500M à 10B"
levels(data$revenue_entrep)[c(6:7)] <- "50M à 500M"
levels(data$revenue_entrep)[c(1:5)] <- "-1M à 50M"

# Vérifiez les niveaux mis à jour
print(levels(data$revenue_entrep))



##############################
### Pour la variable "secteur : gestion manuelle
##############################

frequency_table <- generate_frequency_table(data, "secteur")
print(frequency_table)

# Changez les noms des modalités
levels(data$secteur)[levels(data$secteur) %in% "Information Technology"] <- "technologie_infor"
levels(data$secteur)[levels(data$secteur) %in% "Business Services"] <- "services"
levels(data$secteur)[levels(data$secteur) %in% c("Biotech & Pharmaceuticals", "Health Care")] <- "Sciences_Sante"
levels(data$secteur)[levels(data$secteur) %in% c("Finance", "Insurance" )] <- "finance-assurance"

# Liste des catégories à conserver
conserver <- c("Sciences_Sante" , "finance-assurance" , "services" , "technologie_infor")

# Récupére les niveaux de la variable depuis dataframe 
nom_moda <- levels(data$secteur)

# indices des catégories qui ne sont pas dans 'conserver'
indices_non_conserver <- which(!nom_moda %in% conserver)

# les modalités non conserver dvient autres
levels(data$secteur)[indices_non_conserver]= "autres"


cat("les nouvelles modalites:", levels(data$secteur) )



###############################
### Pour la variable "nom_poste : gestion manuelle
###############################

frequency_table <- generate_frequency_table(data, "nom_poste")
print( head(frequency_table,10) )

# Convertir le facteur en caractère
data$nom_poste <- as.character(data$nom_poste)

# Remplacer les modalités contenant "analyst" par "data_analyst"
data$nom_poste  <- gsub(".*analyst.*", "data_analyst", data$nom_poste , ignore.case = TRUE)

# Remplacer les modalités contenant "scientist" par "data_scientist"
data$nom_poste  <- gsub(".*scientist.*", "data_scientist", data$nom_poste , ignore.case = TRUE)

# Remplacer les modalités contenant "Engineer" par "data_engineer"
data$nom_poste  <- gsub(".*engineer.*", "data_engineer", data$nom_poste , ignore.case = TRUE)


# Convertir la variable 'nom_poste' en facteur
data$nom_poste <- as.factor(data$nom_poste)

# afficher le nombre de niveaux (modalités) de la variable 'nom_poste'
cat("le nombre de modalités apres modification : ", nlevels(data$nom_poste), "\n\n")

# Obtenir la liste des modalités de 'nom_poste'
nom_moda = levels(data$nom_poste)

# Creation d'un vecteur logique pour les modalités à conserver
modalité_garder <- nom_moda == "data_scientist" | nom_moda == "data_analyst" | nom_moda == "data_engineer"

# Remplacer les modalités qui ne sont pas à conserver par "autres"
levels(data$nom_poste)[!modalité_garder] <- "autres"

# verifier
cat("Verification finale :",levels(data$nom_poste))







