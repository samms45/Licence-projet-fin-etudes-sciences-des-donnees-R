##################################################################################################
###################################### Nettoyage des Données ######################################
##################################################################################################

#################################
## Gestion des données manquantes
################################# 

# Remplacement des valeurs -1 par NA dans la variable "eval_entrep"
data[data[, 2] == -1, 2] = NA

# Nombre de lignes complètes sans NA
complete_cases_count <- sum(complete.cases(data))
cat("Nombre de lignes complètes sans données manquantes : ", complete_cases_count, "\n\n")

# Nombre de lignes contenant des NA
na_cases_count <- sum(!complete.cases(data))
cat("Nombre de lignes contenant des données manquantes : ", na_cases_count, "\n\n")

# Proportion des données complètes dans le jeu de données (en pourcentage)
complete_cases_percent <- (complete_cases_count / nrow(data)) * 100
cat("Proportion des données complètes dans le jeu de données : ", complete_cases_percent, "%\n\n")

# Proportion des données manquantes dans le jeu de données (en pourcentage)
na_cases_percent <- (na_cases_count / nrow(data)) * 100
cat("Proportion des données manquantes dans le jeu de données : ", na_cases_percent, "%\n\n")

# Nombre de valeurs manquantes pour chaque variable
apply(data, MARGIN = 2, function(x) sum(is.na(x)))

#  On utilise cette bibliothèque et cette fonction pour visualiser la structure des données manquantes et avoir un résumé statistique des valeurs manquantes.
library(VIM)
summary(aggr(data, sortVar = TRUE))


############################################################################
# On stock les deux variables d'interets avec les Na's pour la modélisation
############################################################################

data_avec_valeurs_manquantes = data[,c("Salaire_Aggrégé","eval_entrep")]
summary(data_avec_valeurs_manquantes)

# on supprime les valeurs manquantes en fonction de la variable secteur et de eval_entrep
data <- subset(data, !is.na(data$secteur))    
data <- subset(data, !is.na(data$eval_entrep)) 

## verification du nombre de valeurs manquantes (NA) dans chaque colonne du dataframe
sapply(data,function(x) sum(is.na(x)))

## nouvelle structure du data
str(data)


################################################
## Identifications et Suppressions des doublons
################################################

doublonstest<-which(duplicated(data))   ##  affichent les lignes admettant des doublons.
print(doublonstest) 

# suppression des doublons
data= data[-doublonstest, ]




############################################################################
# On stock les deux variables d'interets sans les Na's pour la modélisation
############################################################################

data_sans_valeurs_manquantes = data[,c("Salaire_Aggrégé","eval_entrep")]
