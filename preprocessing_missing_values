##################################################################################################
###################################### Nettoyage des Données ######################################
##################################################################################################

################################################
## Identifications et Suppressions des doublons
################################################

doublonstest<-which(duplicated(data))   ##  affichent les lignes admettant des doublons.
print(doublonstest) 

# suppression des doublons
data= data[-doublonstest, ]


#################################
## Gestion des données manquantes
################################# 

# Remplacement des valeurs -1 par NA dans la variable "eval_entrep"
data[data[, 2] == -1, 2] = NA

# Nombre de lignes complètes sans NA
complete_cases_count <- sum(complete.cases(data))
cat("Nombre de lignes complètes sans données manquantes : ", complete_cases_count, "\n\n")

# Nombre de lignes contenant des NA
na_cases_count <- sum(!complete.cases(data))
cat("Nombre de lignes contenant des données manquantes : ", na_cases_count, "\n\n")

# Proportion des données complètes dans le jeu de données (en pourcentage)
complete_cases_percent <- (complete_cases_count / nrow(data)) * 100
cat("Proportion des données complètes dans le jeu de données : ", complete_cases_percent, "%\n\n")

# Proportion des données manquantes dans le jeu de données (en pourcentage)
na_cases_percent <- (na_cases_count / nrow(data)) * 100
cat("Proportion des données manquantes dans le jeu de données : ", na_cases_percent, "%\n\n")

# Nombre de valeurs manquantes pour chaque variable
apply(data, MARGIN = 2, function(x) sum(is.na(x)))

#  On utilise cette bibliothèque et cette fonction pour visualiser la structure des données manquantes et avoir un résumé statistique des valeurs manquantes.
library(VIM)
summary(aggr(data, sortVar = TRUE))

############

## On stock les deux variables d'interets AVEC les Na's pour la modélisation 
data_avec_valeurs_manquantes = data[,c("Salaire_Aggrégé","eval_entrep")]
summary(data_avec_valeurs_manquantes)

# on supprime les valeurs manquantes en fonction de la variable secteur et de eval_entrep
data <- subset(data, !is.na(data$secteur))    
data <- subset(data, !is.na(data$eval_entrep)) 

## verification du nombre de valeurs manquantes (NA) dans chaque colonne du dataframe
sapply(data,function(x) sum(is.na(x)))

## nouvelle structure du data
str(data)

# On stock les deux variables d'interets SANS les Na's pour la modélisation
data_sans_valeurs_manquantes = data[,c("Salaire_Aggrégé","eval_entrep")]



#################################################################################
############  Pré traitement des valeurs manquantes avant modélisation ###########
##################################################################################

## Application de la fonction mice: 
## Selection des méthodes d'imputation via à l'impact du du R2 d'une regression simple

methode <- c("rf", "norm.boot", "quadratic", "pmm")

# Initialiser une liste pour stocker les résultats
results_list <- list()

# Boucle sur chaque méthode
for (j in 1:length(methode)) {
  imp <- mice(data_avec_valeurs_manquantes[, c("Salaire_Aggrégé", "eval_entrep")], method = methode[j], m = 100, maxit = 20, seed = 1)
  fit <- lm.mids(Salaire_Aggrégé ~ eval_entrep, data = imp)
  
  # Initialiser un vecteur pour stocker les R²
  r_squared_values <- numeric(100)
  
  # Boucle sur chaque ensemble
  for (i in 1:100) {
    # Collecter le R² de chaque ensemble
    r_squared_values[i] <- summary(fit$analyses[[i]])$r.squared
  }
  
  # Trouver l'indice du meilleur R²
  best_index <- which.max(r_squared_values)
  
  # Stocker les résultats dans la liste
  results_list[[j]] <- list(method = methode[j], max_r_squared = r_squared_values[best_index], index = best_index)
  
  # Afficher les résultats pour chaque méthode
  cat("Method:", methode[j], "\n")
  cat("Maximum R-squared:", r_squared_values[best_index], "at index", best_index, "\n\n")
}

# Afficher les résultats globaux
cat("Global Results:\n")
for (j in 1:length(results_list)) {
  cat("Method:", results_list[[j]]$method, "\n")
  cat("R-squared:", results_list[[j]]$max_r_squared, "meilleur ensemble", results_list[[j]]$index, "\n\n")
}



############################################
# Inspecter la convergence de l'algorithme
############################################

## Nous réappliquons la fonction mice pour la garder l'ensemble de données complet qui est l'iteration 83
imp= mice(data_avec_valeurs_manquantes[,c("Salaire_Aggrégé","eval_entrep")], method="pmm", m=100, maxit=20, seed=1)

# Moyenne et écart type des valeurs synthétiques tracées par rapport au nombre d'itérations des variables ("probeleme fourni que les quanti" vu mean et sd)
plot(imp, layout = c(2, 1), col = 1:20)

# comparer les distributions des valeurs imputéeset observées pour chacune des variables.

densityplot(imp)
# Ajouter la légende
legend("topleft", legend = c("Imputé", "Observé"), col = c("red", "blue"), lty = 1)


# stockage du meilleurs ensemble de données de complet imputé
don = complete(imp,83)



#################################################################################################################
## Selection du meilleur modéle de regression linéaire avec données completes imputées et aprres suppression des données manquantes
##################################################################################################################

# Ajuster un modèle de régression linéaire avec na supprimé
modele_sans_imp <- lm(Salaire_Aggrégé ~ eval_entrep, data = data_sans_valeurs_manquantes)

# broom::glance pour extraire les statistiques globales
resume_modele_sans_imp <- glance(modele_sans_imp)

print (resume_modele_sans_imp[c("r.squared", "sigma", "AIC", "BIC")] ) 

# modèle de régression linéaire avec na imputé
modele_avec_imp <- lm(Salaire_Aggrégé ~ eval_entrep, data = don)

# pour extraire les statistiques globales
resume_modele_avec_imp <- glance(modele_avec_imp)

print( resume_modele_avec_imp[c("r.squared", "sigma", "AIC", "BIC")] )





